#ifndef PARSER_H
#define PARSER_H

// #define PARSER_LOG

constexpr const uint8_t dfa[48][256] = {
    {},
    {},
    {24,38,38,38,38,38,38,38,38,38, 1,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38, 3,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38, 9, 4,38,38, 7,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38},
    {24,17,17,17,17,17,17,17,17,16,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,42,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,33,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,27,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {},
    {},
    {},
    {},
    {},
    {24,38,38,38,38,38,38,38,38,38, 1,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38, 2,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,10,38,40,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38},
    {24,38,38,38,38,38,38,38,38,38, 1,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38, 2,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38, 7,38,38,38,38,38,38,38,38,38,11,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38},
    {},
    {},
    {24,15,15,15,15,15,15,15,15,14,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,15,15,36,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,19,36,36,36,36,15,15,26,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {24,15,15,15,15,15,15,15,15,14,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,15,15,36,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,19,36,36,36,36,15,15,26,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {24,15,15,15,15,15,15,15,15,15,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,15,15,36,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,19,36,36,36,36,15,15,35,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {24,17,17,17,17,17,17,17,17,16,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,34,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,33,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,27,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {24,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,34,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,33,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,27,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {},
    {24,15,15,15,15,15,15,15,15,15,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,15,15,36,15,20,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,35,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {24,15,15,15,15,15,15,15,15,15,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,15,15,36,15,36,36,36,36,36,36,36,36,36,36,36,22,36,36,36,36,36,21,36,36,36,36,36,36,36,36,15,15,35,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {24,15,15,15,15,15,15,15,15,15,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,15,15,23,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,35,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {24,15,15,15,15,15,15,15,15,15,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,15,15,23,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,35,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {},
    {},
    {24,15,15,15,15,15,15,15,15,15,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,25,25,25,25,25,25,25,25,25,25,15,15,15,15,15,15,15,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,15,15,15,15,25,15,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,15,15,35,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {},
    {24,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,34,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,33,17,28,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {24,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,34,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,33,17,33,33,33,33,33,33,33,33,33,33,33,30,33,33,33,33,33,29,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {24,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,34,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,31,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {24,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,34,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,31,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {24,26,26,26,26,26,26,26,26,26,18,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,26,26,26,26,32,26,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26},
    {24,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,34,17,17,17,17,17,17,17,17,17,17,17,32,32,32,32,32,32,32,32,32,32,17,17,17,17,17,17,17,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,17,17,17,17,32,17,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {24,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,34,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,33,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {24,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,38,17,17,17,17,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,17,17,17,17,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,17,17,17,17,33,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,27,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
    {24,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,37,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26},
    {24,15,15,15,15,15,15,15,15,15,18,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,15,15,15,15,15,15,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,15,15,36,15,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,15,15,35,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15},
    {},
    {},
    {24,38,38,38,38,38,38,38,38,38, 1,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38, 3,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38, 9, 4,38,38, 7,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38},
    {},
    {},
    {},
    {24,45,45,45,45,45,45,45,45,45,46,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,44,44,44,38,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45},
    {},
    {},
    {},
    {}
};


py::dict parse(const py::bytes& code) {
    std::string buffer = code;
    const  char*   code_buffer = buffer.data();
    const  size_t  code_length = buffer.size();

    // ---------- Python Variables ----------

    py::list root;

    py::set vars;
    py::set vals;

    py::list errors;

    std::vector<py::list> tree_stack;
    tree_stack.push_back(root);

    py::list line_start_indexes;
    line_start_indexes.append(0);

    py::list cache;

    std::vector<py::tuple> block_headers;

    // ---------- Other  Variables ----------

    uint64_t plain_text_start=0, plain_text_end=0;
    uint64_t expression_start=0, expression_end=0;
    uint64_t directive_arg_start=0, directive_arg_end=0;
    uint64_t directive_start=0, directive_end=0;
    uint64_t cache_start=0, cache_end=0;
    uint64_t cache_line_start=0, cache_line_end=0;
    uint64_t name_start=0, name_end=0;
    uint64_t line_content_start=0;

    bool directive_prefix = false;
    bool empty_prefix = true;
    bool cache_found = false;

    enum class Directive : uint8_t {
        FOR,IF,ELSE,ELIF,END
    } directive{};

    enum class vType : uint8_t {
        VAL,VAR
    } v_type;

    // ---------- DFA CODE ----------

    uint64_t ptr = 0;
    uint16_t transition = 0;
    uint8_t& state  = *(reinterpret_cast<uint8_t*>(&transition) + 0); // Least significant byte on LE systems, Most  in BE ones. 
    uint8_t& pstate = *(reinterpret_cast<uint8_t*>(&transition) + 1); // Most  significant byte on LE systems, Least in BE ones. 
    // state and pstate are adjusted here for LE systems. For BE systems, swap the '+ 0' and '+ 1' above
    // state must be the least significant byte and pstate the most significant byte

    while (ptr <= code_length) {
        pstate = state;
        state = dfa[state][static_cast<uint8_t>(code_buffer[ptr])];

        #ifdef PARSER_LOG
            std::cout << std::dec << std::setfill('0') << std::setw(2) << (int)(line_start_indexes.size()) << ", ";

        char c = code_buffer[ptr];
        switch (c){
        case ' ':
                std::cout << "sp";
            break;
        case '\r':
                std::cout << "\\r";
            break;
        case '\t':
                std::cout << "\\t";
            break;
        case '\n':
                std::cout << "\\n";
            break;
        case 0:
                std::cout << "\\0";
            break;
        default:
                std::cout << " " << c;
        }

            std::cout << " - "  << std::hex << std::setfill('0') << std::setw(2) << (int)pstate << " -> " << std::hex << std::setfill('0') << std::setw(2) << (int)state << " : ";
        #endif

        switch (state) {
            case 0x01:
            case 0x12:
            case 0x2E:
            case 0x18:
                {
                    #ifdef PARSER_LOG
                        std::cout << "PUSH LINE; empty_prefix=T; ";
                    #endif
                    line_start_indexes.append(ptr+1);
                    empty_prefix=true;
                    directive_prefix=false;
                } break;
            case 0x22:
                {
                    expression_end = ptr;
                } break;
            case 0x2A:
                {
                    if (cache_found){
                        #ifdef PARSER_LOG
                            std::cout << "MULT_CACHE; ";
                        #endif
                        py::dict err;
                        err["code"] = py::str("MULT_CACHE");
                        err["location"] = py::make_tuple(line_start_indexes.size(),ptr-2, ptr+1);
                        errors.append(err);
                        break;
                    }
                    cache_start = ptr-2;
                    cache_found = true;
                } break;
            case 0x02:
                {
                    plain_text_end = ptr;
                } break;
            case 0x03:
            case 0x0D:
                {
                    if (plain_text_start<plain_text_end) {
                        #ifdef PARSER_LOG
                            std::cout << "plain_text; ";
                        #endif
                        py::dict node;
                        node["type"] = "plain_text";
                        node["argument"] = py::make_tuple(plain_text_start, plain_text_end);
                        tree_stack.back().append(node);
                    }
                } break;
            case 0x15:
            case 0x1D:
                {
                    v_type = vType::VAR;
                    #ifdef PARSER_LOG
                        std::cout << "vType=VAR; ";
                    #endif
                } break;
            case 0x16:
            case 0x1E:
                {
                    v_type = vType::VAL;
                    #ifdef PARSER_LOG
                        std::cout << "vType=VAL; ";
                    #endif
                } break;
            case 0x04:
                {
                    directive = Directive::FOR;
                    #ifdef PARSER_LOG
                        std::cout << "directive=FOR; ";
                    #endif
                } break;
            case 0x28:
                {
                    directive = Directive::END;
                    #ifdef PARSER_LOG
                        std::cout << "directive=END; ";
                    #endif
                } break;
        }

        switch (transition) {
            case 0x2707:
                {
                    directive = Directive::IF;
                    #ifdef PARSER_LOG
                        std::cout << "directive=IF; ";
                    #endif
                }
            case 0x0204:
            case 0x0207:
            case 0x0209:
            case 0x2704:
            case 0x2709:
                {
                    directive_start = ptr-1;
                } break;
            case 0x0312:
            case 0x1012:
            case 0x1112:
            case 0x1B12:
            case 0x1C12:
            case 0x1D12:
            case 0x1E12:
            case 0x1F12:
            case 0x2012:
            case 0x2112:
            case 0x2212:
                {
                    #ifdef PARSER_LOG
                        std::cout << "LB_OPN_EXP; ";
                    #endif
                    py::dict err;
                    err["code"] = py::str("LB_OPN_EXP");
                    err["location"] = py::make_tuple(line_start_indexes.size(),expression_start, ptr);
                    errors.append(err);
                } break;
            case 0x0D12:
            case 0x0E12:
            case 0x0F12:
            case 0x1312:
            case 0x1412:
            case 0x1512:
            case 0x1612:
            case 0x1712:
            case 0x2412:
            case 0x2312:
            case 0x1912:
                {
                    #ifdef PARSER_LOG
                        std::cout << "LB_OPN_ARG; ";
                    #endif
                    py::dict err;
                    err["code"] = py::str("LB_OPN_ARG");
                    err["location"] = py::make_tuple(line_start_indexes.size(),directive_arg_start, ptr);
                    errors.append(err);
                } break;
            case 0x0318:
            case 0x1018:
            case 0x1118:
            case 0x1B18:
            case 0x1C18:
            case 0x1D18:
            case 0x1E18:
            case 0x1F18:
            case 0x2018:
            case 0x2118:
            case 0x2218:
                {
                    #ifdef PARSER_LOG
                        std::cout << "EOF_OPN_EXP; ";
                    #endif
                    py::dict err;
                    err["code"] = py::str("EOF_OPN_EXP");
                    err["location"] = py::make_tuple(line_start_indexes.size(),expression_start, ptr);
                    errors.append(err);
                } break;
            case 0x0D18:
            case 0x0E18:
            case 0x0F18:
            case 0x1318:
            case 0x1418:
            case 0x1518:
            case 0x1618:
            case 0x1718:
            case 0x2418:
            case 0x1918:
                {
                    #ifdef PARSER_LOG
                        std::cout << "EOF_OPN_ARG; ";
                    #endif
                    py::dict err;
                    err["code"] = py::str("EOF_OPN_ARG");
                    err["location"] = py::make_tuple(line_start_indexes.size(),directive_arg_start, ptr);
                    errors.append(err);
                } break;
            case 0x2A18:
            case 0x2C18:
            case 0x2D18:
            case 0x2E18:
            case 0x2F18:
            case 0x2B18:
                {
                    #ifdef PARSER_LOG
                        std::cout << "EOF_OPN_CACHE; ";
                    #endif
                    py::dict err;
                    err["code"] = py::str("EOF_OPN_CACHE");
                    err["location"] = py::make_tuple(line_start_indexes.size(),cache_start, ptr);
                    errors.append(err);
                } break;
            case 0x0018:
            case 0x0118:
            case 0x0218:
            case 0x2618:
            case 0x2718:
            case 0x0418:
            case 0x0518:
            case 0x0618:
            case 0x0718:
            case 0x0818:
            case 0x0918:
            case 0x0A18:
            case 0x0B18:
            case 0x0C18:
            case 0x2818:
            case 0x2918:
            case 0x2518:
                {
                    plain_text_end = ptr;
                    if (plain_text_start<plain_text_end) {
                        #ifdef PARSER_LOG
                            std::cout << "plain_text; ";
                        #endif
                        py::dict node;
                        node["type"] = "plain_text";
                        node["argument"] = py::make_tuple(plain_text_start, plain_text_end);
                        tree_stack.back().append(node);
                    }
                } break;
            case 0x0100:
                {
                    plain_text_end = ptr;
                } break;
            case 0x0026:
            case 0x0126:
                {
                    empty_prefix = false;
                    #ifdef PARSER_LOG
                        std::cout << "empty_prefix=" << (empty_prefix ? "T" : "F") << "; ";
                    #endif
                }
            case 0x0027:
            case 0x0127:
                {
                    line_content_start = ptr;
                    #ifdef PARSER_LOG
                        std::cout << "line_content_start=" << std::dec << std::setfill(' ') << std::setw(3) << (int)ptr << "; ";
                    #endif
                } break;
            case 0x0A07:
                {
                    directive = Directive::ELIF;
                    #ifdef PARSER_LOG
                        std::cout << "directive=ELIF; ";
                    #endif
                } break;
            case 0x0A0B:
                {
                    directive = Directive::ELSE;
                    #ifdef PARSER_LOG
                        std::cout << "directive=ELSE; ";
                    #endif
                } break;
            case 0x2B26:
                {
                    cache_end = ptr+1;
                }
            case 0x2226:
                {
                    #ifdef PARSER_LOG
                        std::cout << "expression; ";
                    #endif
                    py::dict node;
                    node["type"] = "expression";
                    node["argument"] = py::make_tuple(line_start_indexes.size()-1,expression_start, expression_end);
                    tree_stack.back().append(node);
                }
            case 0x2501:
                {
                    plain_text_start = ptr+1;
                } break;
            case 0x171A:
            case 0x1F1A:
                {
                    #ifdef PARSER_LOG
                        std::cout << "INV_IDF; ";
                    #endif
                    py::dict err;
                    err["code"] = py::str("INV_IDF");
                    err["location"] = py::make_tuple(line_start_indexes.size(),ptr-4, ptr+1);
                    errors.append(err);
                } break;
            case 0x231A:
            case 0x2526:
            case 0x2527:
                {
                    if (directive_prefix) break;
                    #ifdef PARSER_LOG
                        std::cout << "INV_DIR_POS; ";
                    #endif
                    py::dict err;
                    err["code"] = py::str("INV_DIR_POS");
                    err["location"] = py::make_tuple(line_start_indexes.size(),directive_end, ptr+1);
                    errors.append(err);
                } break;
            case 0x0D1A:
            case 0x0E1A:
                {
                    #ifdef PARSER_LOG
                        std::cout << "EMPTY_ARG; ";
                    #endif
                    py::dict err;
                    err["code"] = py::str("EMPTY_ARG");
                    err["location"] = py::make_tuple(line_start_indexes.size(),directive_arg_start, ptr+1);
                    errors.append(err);
                } break;
            case 0x2A2C:
            case 0x2D2C:
            case 0x2E2C:
            case 0x2F2C:
            case 0x2B2C:
                {
                    cache_line_start = ptr;
                } break;
            case 0x2C2D:
            case 0x2C2E:
            case 0x2C2F:
                {
                    #ifdef PARSER_LOG
                        std::cout << "cache_line; ";
                    #endif
                    cache_line_end = ptr;
                    cache.append(py::make_tuple(line_start_indexes.size()-1,cache_line_start, cache_line_end));
                } break;
            case 0x0311:
            case 0x0321:
            case 0x031B:
            case 0x1011:
            case 0x1021:
            case 0x101B:
            case 0x1022:
                {
                    expression_start = ptr;
                } break;
            case 0x0D24:
            case 0x0D0F:
            case 0x0D13:
            case 0x0E13:
                {
                    directive_arg_start = ptr;
                } break;
            case 0x0C25:
            case 0x2925:
                {
                    directive_arg_start = ptr;
                    if (plain_text_start<plain_text_end) {
                        #ifdef PARSER_LOG
                            std::cout << "plain_text; ";
                        #endif
                        py::dict node;
                        node["type"] = "plain_text";
                        node["argument"] = py::make_tuple(plain_text_start, plain_text_end);
                        tree_stack.back().append(node);
                    }
                }
            case 0x2325:
                {
                    directive_end = ptr+1;
                    directive_arg_end = ptr-1;

                    if (!empty_prefix){
                        #ifdef PARSER_LOG
                            std::cout << "INV_DIR_PRE; ";
                        #endif
                        py::dict err;
                        err["code"] = py::str("INV_DIR_PRE");
                        err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start,directive_start);
                        errors.append(err);
                        break;
                    }

                    switch(directive){
                        case Directive::FOR:
                            {
                                if (directive_prefix){
                                    #ifdef PARSER_LOG
                                        std::cout << "MULT_DIR; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("MULT_DIR");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start, directive_start);
                                    errors.append(err);
                                    break;
                                }
                                #ifdef PARSER_LOG
                                    std::cout << "FOR; ";
                                #endif

                                py::dict node;
                                node["type"] = "FOR";
                                node["argument"] = py::make_tuple(line_start_indexes.size()-1,directive_arg_start, directive_arg_end);

                                py::list subtree;
                                node["subtree"] = subtree;

                                tree_stack.back().append(node);
                                tree_stack.push_back(subtree);
                                
                                block_headers.push_back(py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr));

                                directive_prefix = true;
                            } break;
                        case Directive::IF:
                            {
                                if (directive_prefix){
                                    #ifdef PARSER_LOG
                                        std::cout << "MULT_DIR; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("MULT_DIR");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start, directive_start);
                                    errors.append(err);
                                    break;
                                }
                                #ifdef PARSER_LOG
                                    std::cout << "IF; ";
                                #endif

                                py::dict node;
                                node["type"] = "IF";

                                py::list blocks;
                                node["blocks"] = blocks;

                                py::dict block;
                                block["argument"] = py::make_tuple(line_start_indexes.size()-1,directive_arg_start, directive_arg_end);

                                py::list subtree;
                                block["subtree"] = subtree;

                                blocks.append(block);
                                tree_stack.back().append(node);
                                tree_stack.push_back(subtree);

                                block_headers.push_back(py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr));

                                directive_prefix = true;
                            } break;
                        case Directive::ELSE:
                            {
                                if (directive_prefix){
                                    #ifdef PARSER_LOG
                                        std::cout << "MULT_DIR; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("MULT_DIR");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start, directive_start);
                                    errors.append(err);
                                    break;
                                }
                                if (tree_stack.size() < 2) {
                                    #ifdef PARSER_LOG
                                        std::cout << "ELSE_ROOT; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("ELSE_ROOT");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr);
                                    errors.append(err);
                                    break;
                                }

                                py::list parent_subtree = tree_stack[tree_stack.size() - 2];
                                py::dict parent_node = parent_subtree[parent_subtree.size() - 1];
                                py::str parent_node_type = parent_node["type"];

                                if ((std::string)parent_node_type != "IF") {
                                    #ifdef PARSER_LOG
                                        std::cout << "ELSE_OUT; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("ELSE_OUT");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr);
                                    errors.append(err);
                                    break;
                                }

                                #ifdef PARSER_LOG
                                    std::cout << "ELSE; ";
                                #endif

                                py::list parent_node_blocks = parent_node["blocks"];

                                py::dict block;
                                py::list subtree;
                                block["subtree"] = subtree;

                                parent_node_blocks.append(block);

                                tree_stack.pop_back();
                                tree_stack.push_back(subtree);

                                block_headers.pop_back();
                                block_headers.push_back(py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr));

                                directive_prefix = true;
                            } break;
                        case Directive::ELIF:
                            {
                                if (directive_prefix){
                                    #ifdef PARSER_LOG
                                        std::cout << "MULT_DIR; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("MULT_DIR");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start, directive_start);
                                    errors.append(err);
                                    break;
                                }
                                if (tree_stack.size() < 2) {
                                    #ifdef PARSER_LOG
                                        std::cout << "ELIF_ROOT; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("ELIF_ROOT");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr);
                                    errors.append(err);
                                    break;
                                }

                                py::list parent_subtree = tree_stack[tree_stack.size() - 2];
                                py::dict parent_node = parent_subtree[parent_subtree.size() - 1];
                                py::str parent_node_type = parent_node["type"];

                                if ((std::string)parent_node_type != "IF") {
                                    #ifdef PARSER_LOG
                                        std::cout << "ELIF_OUT; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("ELIF_OUT");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr);
                                    errors.append(err);
                                    break;
                                }

                                #ifdef PARSER_LOG
                                    std::cout << "ELIF; ";
                                #endif

                                py::list parent_node_blocks = parent_node["blocks"];

                                py::dict previous_block = parent_node_blocks[parent_node_blocks.size() - 1];
                                if (!previous_block.contains("argument")) {
                                    #ifdef PARSER_LOG
                                        std::cout << "ELSE_ELIF; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("ELSE_ELIF");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr);
                                    errors.append(err);
                                    break;
                                }

                                py::dict block;
                                block["argument"] = py::make_tuple(line_start_indexes.size()-1,directive_arg_start, directive_arg_end);

                                py::list subtree;
                                block["subtree"] = subtree;

                                parent_node_blocks.append(block);

                                tree_stack.pop_back();
                                tree_stack.push_back(subtree);

                                block_headers.pop_back();
                                block_headers.push_back(py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr));

                                directive_prefix = true;
                            } break;
                        case Directive::END:
                            {
                                if (directive_prefix){
                                    #ifdef PARSER_LOG
                                        std::cout << "MULT_DIR; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("MULT_DIR");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start, directive_start);
                                    errors.append(err);
                                    break;
                                }
                                if (tree_stack.size() < 2) {
                                    #ifdef PARSER_LOG
                                        std::cout << "CLOSE_ROOT; ";
                                    #endif

                                    py::dict err;
                                    err["code"] = py::str("CLOSE_ROOT");
                                    err["location"] = py::make_tuple(line_start_indexes.size(),line_content_start+1, ptr);
                                    errors.append(err);
                                    break;
                                }

                                #ifdef PARSER_LOG
                                    std::cout << "END; ";
                                #endif

                                tree_stack.pop_back();
                                block_headers.pop_back();

                                directive_prefix = true;
                            } break;
                    }
                } break;
            case 0x1719:
            case 0x1F20:
                {
                    name_start = ptr;
                } break;
            case 0x2011:
            case 0x2022:
            case 0x190F:
            case 0x1923:
                {
                    name_end = ptr;
                    py::str name = py::str(reinterpret_cast<const char*>(code_buffer + name_start), name_end - name_start);
                    switch(v_type){
                        case vType::VAL:
                            {
                    #ifdef PARSER_LOG
                                    std::cout << "VAL; ";
                                #endif
                                vals.add(name);
                            } break;
                        case vType::VAR:
                            {
                    #ifdef PARSER_LOG
                                    std::cout << "VAR; ";
                                #endif
                                vars.add(name);
                            } break;
                    }
                } break;
        }

        ++ptr;
        #ifdef PARSER_LOG
            std::cout << std::endl;
        #endif
    }

    if (tree_stack.size() > 1 && (state!=0x1A)) {
        py::dict err;
        err["code"] = py::str("EOF_OPN_BLK");
        err["location"] = block_headers.back();
        errors.append(err);
    }

    py::dict result;

    if (errors.size()) {

        result["errors"] = errors;

    } else {

        result["tree"] = root;

        py::dict names;
        names["vars"] = vars;
        names["vals"] = vals;
        result["names"] = names;

        if (cache_found)
            result["cache"] = cache;

    }
    
    result["line_start_indexes"] = line_start_indexes;

    return result;
}

#endif
